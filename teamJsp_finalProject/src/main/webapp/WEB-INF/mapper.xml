<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  

  <mapper namespace="kr.co.finalp">
  	<!-- 갤러리 전체 출력 -->
  	<select id="photoGallery_selectAll" parameterType="gallStartEnd" resultType="gdto">	
		SELECT t2.*
		   FROM (
		      SELECT ROWNUM AS rnum
		          , t1.*
		         FROM (
		            SELECT c1.gallery_category_no 								-- 갤러리 카테고리 번호         
		               , c1.gallery_category 									-- 갤러리 카테고리
		               , c2.galleryno 											-- 갤러리 번호 
		               , c2.admin_no  											-- 관리자 번호 
		               , c2.gallery_title 										-- 갤러리 제목
		               , to_char(c2.gallery_date,'yyyy-mm-dd') as gallery_date  -- 갤러리 작성일
		               , c2.gallery_hit 										-- 갤러리 조회수
		               , c3.fileno 												-- 첨부파일 
		               , c3.file_url 											-- 첨부파일 URL
		               FROM gallery_category c1
		               LEFT JOIN gallery c2
		               ON ( c2.gallery_category_no = c1.gallery_category_no )
		               LEFT JOIN files c3
		               ON ( c3.galleryno = c2.galleryno )
		               WHERE 1=1
		               AND c1.gallery_category_no = #{galleryCategoryNo}
		               <choose>		
		               	<when test="sort_order != null and sort_order != '' and sort_order.equals('latest_order')">
			               ORDER BY c2.galleryno desc
		               	</when>	                      
		               	<when test="sort_order != null and sort_order != '' and sort_order.equals('old_order')">
			               ORDER BY c2.galleryno asc
		               	</when>
		               	<otherwise>
		             	   ORDER BY c2.galleryno desc
		               	</otherwise>
		               </choose>
		         ) t1
	             WHERE ROWNUM &lt; = #{endNo}		            
		    ) t2
		    WHERE #{startNo} &lt; = rnum
		    ORDER BY rnum    
  	</select>
  	
  	<!-- 카테고리별 갤러리 갯수 -->
  	<select id="photoGallery_getTotal" parameterType="gallStartEnd" resultType="int">
  		SELECT COUNT(*) total  					
            FROM gallery_category c1
            LEFT JOIN gallery c2
            ON ( c2.gallery_category_no = c1.gallery_category_no )
            LEFT JOIN files c3
            ON ( c3.galleryno = c2.galleryno )
            WHERE c1.gallery_category_no = #{galleryCategoryNo}
  	</select>
  	

  	<!-- 갤러리 1개 출력 -->
  	<select id="photoGallery_selectOne" resultType="gdto" parameterType="int">
		SELECT t2.*
		   FROM (
		      SELECT ROWNUM AS rnum
		          , t1.*
		         FROM (
		            SELECT c1.gallery_category_no 								-- 갤러리 카테고리 번호         
		               , c1.gallery_category 									-- 갤러리 카테고리
		               , c2.galleryno 											-- 갤러리 번호 
		               , c2.admin_no  											-- 관리자 번호 
		               , c2.gallery_title 										-- 갤러리 제목
		               , to_char(c2.gallery_date,'yyyy-mm-dd') as gallery_date  -- 갤러리 작성일
		               , c2.gallery_hit 										-- 갤러리 조회수
		               , c3.fileno 												-- 첨부파일 
		               , c3.file_url 											-- 첨부파일 URL
		               FROM gallery_category c1
		               LEFT JOIN gallery c2
		               ON ( c2.gallery_category_no = c1.gallery_category_no )
		               LEFT JOIN files c3
		               ON ( c3.galleryno = c2.galleryno )
		         ) t1
		            WHERE galleryno = #{galleryno}
		    ) t2 
  	</select>
	
	<!-- 갤러리 조회수 증가 -->
  	<update id="gallery_hits" parameterType="int">
  		UPDATE gallery
  		SET gallery_hit = gallery_hit+1
  		WHERE galleryno = #{galleryno}
  	</update>
  	
  	<!-- 관리자가 갤러리 추가  -->
  	<insert id="admin_gallery_insert" parameterType="gdto">
  		INSERT INTO gallery
		VALUES ( #{galleryno}, #{gallery_category_no}, 1, #{gallery_title}, to_char(sysdate, 'yy/mm/dd'), 0)
  	</insert>
  	<insert id="admin_files_insert" parameterType="gdto">
  		INSERT INTO files
		VALUES (FILE_NO_SEQ.nextval, #{galleryno}, #{file_url} )
  	</insert>
  	
  	<!-- 관리자 갤러리 수정 -->
  	<update id="admin_gallery_update" parameterType="gdto">
  		UPDATE gallery
  		SET gallery_category_no = #{gallery_category_no},
  			gallery_title = #{gallery_title}, admin_no = #{admin_no}
  		WHERE galleryno = #{galleryno}
  	</update>
  	<update id="admin_files_update" parameterType="gdto">
  		UPDATE files
  		SET file_url = #{file_url}
  		WHERE galleryno = #{galleryno}
  	</update>
  	
  	<!-- 관리자 갤러리 삭제 -->
  	<delete id="admin_gallery_delete">
  		DELETE gallery
  		WHERE galleryno = #{galleryno}
  	</delete>
  	<delete id="admin_files_delete">
  		DELETE files
  		WHERE galleryno = #{galleryno}
  	</delete>
  	
  	<!-- 경기일정 list -->
  	<select id="schedule_selectAll" parameterType="sheduleMonth" resultType="schedto">
    	  SELECT c1.gameno       
	     , to_char(c1.game_date, 'yy-mm-dd')game_date 	
         , c1.game_arena
         , c1.game_status
         , c1.game_result       
         , c1.game_score
         , c1.teamno
         , c2.team_name
         , c2.team_logo        
         , c1.teamno2
         , c3.team_name team_name2
         , c3.team_logo team_logo2
   	    FROM games c1
        LEFT JOIN team c2
        ON ( c2.teamno = c1.teamno )        
        LEFT JOIN team c3
        ON ( c3.teamno = c1.teamno2 )
        <choose>
        	<when test="gameno == 133">
    	    	WHERE c1.gameno &lt;= 133  
    	    	AND EXTRACT(MONTH from c1.game_date) = #{select_month}      	
        	</when>
        	<when test="gameno == 134">
    	    	WHERE c1.gameno &gt;= 134      	        	
    	    	AND EXTRACT(MONTH from c1.game_date) = #{select_month}
        	</when>
        </choose>
        ORDER BY c1.gameno asc
  	</select>
  	
  	<!-- 관리자 경기일정 페이징 -->
  	<select id="schedule_paging" parameterType="sheduleMonth" resultType="schedto">
  		 select t2.*
		  from(  
		      SELECT ROWNUM AS rnum, t1.*   
		      from(   SELECT c1.gameno      
			     , to_char(c1.game_date, 'yy-mm-dd')game_date 	
		         , c1.game_arena
		         , c1.game_status
		         , c1.game_result       
		         , c1.game_score
		         , c1.teamno
		         , c2.team_name
		         , c2.team_logo        
		         , c1.teamno2
		         , c3.team_name team_name2
		         , c3.team_logo team_logo2
		   	    FROM games c1
		        LEFT JOIN team c2
		        ON ( c2.teamno = c1.teamno )        
		        LEFT JOIN team c3
		        ON ( c3.teamno = c1.teamno2 )
		       <choose>
		        	<when test="gameno == 133">
		    	    	WHERE c1.gameno &lt;= 133  
		    	    	AND EXTRACT(MONTH from c1.game_date) = #{select_month}      	
		        	</when>
		        	<when test="gameno == 134">
		    	    	WHERE c1.gameno &gt;= 134      	        	
		    	    	AND EXTRACT(MONTH from c1.game_date) = #{select_month}
		        	</when>
		        </choose>
		        ORDER BY c1.gameno asc)t1
		        where ROWNUM &lt;= #{endNo} )t2
		        where #{startNo} &lt;= rnum
		        order by rnum
  	</select>
  	
  	<!-- 경기일정 월별 갯수 -->
  	<select id="schedule_getTotl" parameterType="sheduleMonth" resultType="int">
  	     	SELECT COUNT(*) total
		    FROM games      
		    WHERE EXTRACT(MONTH from game_date) = #{select_month}
  	</select>
  	
  	<!-- 경기일정 추가 -->
  	<insert id="admin_schedule_insert" parameterType="schedto">
  		INSERT INTO games
  		VALUES ( gameno_seq.nextval, #{game_date}, #{game_arena}, #{game_status}, #{game_result}, #{teamno}, #{teamno2}, #{game_score} )
  	</insert>
  	
  	<!-- 경기일정 1개 -->
  	<select id="scheduleSelectOne" parameterType="int" resultType="schedto">
  		SELECT gameno, to_char(game_date, 'yy/mm/dd')game_date,game_arena,game_status,game_result,teamno,teamno2,game_score
  		FROM games WHERE gameno = #{gameno}
  	</select>
  	
  	<!-- 경기일정 수정 -->
  	<update id="admin_schedule_update" parameterType="schedto">
		UPDATE games
		SET game_date = #{game_date}, game_arena = #{game_arena}, game_status = #{game_status}, game_result = #{game_result},
			teamno = #{teamno}, teamno2 = #{teamno2}, game_score = #{game_score}
		WHERE gameno = #{gameno}  	
  	</update>
  	
  	<!-- 일정 삭제 -->
  	<delete id="admin_schedule_delete" parameterType="int">
  		DELETE games
  		WHERE gameno = #{gameno}
  	</delete>

  	
  	<!-- 팀 순위 리스트 -->
  	<select id="teamRank_selectAll" resultType="rankdto">
  		SELECT t.teamno, t.team_name, t.team_rank, count(r.gameno)gameCount, t.team_logo,
        sum(r.winteam)win, sum(r.loseteam)lose, 
        to_char(round(sum(r.winteam)/count(r.gameno),3),'FM90.000')winRate
		FROM  team t
		LEFT JOIN teamrecord r
		ON(t.teamno = r.teamno) 
		group by t.teamno, t.team_name, t.team_rank, t.team_logo
		ORDER BY t.team_rank asc
  	</select>
  	
    <!-- 득점 순위 -->
  	<select id="ptsRank_selectAll" resultType="playerRankdto">
  		SELECT ROWNUM rn, t1.*
  		FROM(
		SELECT p.player_code, p.player_name, p.player_img,
		       to_char(ROUND(AVG(pc.player_pts),2),'FM00.00')player_pts, p.player_backno
		FROM player p
		LEFT JOIN playerrecord pc
		ON(p.player_code = pc.player_code)
		GROUP BY p.player_code, p.player_name, p.player_img, p.player_backno
		ORDER BY player_pts desc
		)t1
		WHERE ROWNUM &lt;= 5
  	</select>
  	
  	<!-- 리바운드 순위 -->
  	<select id="rebRank_selectAll" resultType="playerRankdto">
  		SELECT ROWNUM rn, t1.*
  		FROM(
		SELECT p.player_code, p.player_name, p.player_img,
		       to_char(ROUND(AVG(pc.player_reb),2),'FM00.00')player_reb, p.player_backno
		FROM player p
		LEFT JOIN playerrecord pc
		ON(p.player_code = pc.player_code)
		GROUP BY p.player_code, p.player_name, p.player_img, p.player_backno
		ORDER BY player_reb desc
		)t1
		WHERE ROWNUM &lt;= 5
  	</select>
  	
  	<!-- 어시스트 순위 -->
  	<select id="astRank_selectAll" resultType="playerRankdto">
  		SELECT ROWNUM rn, t1.*
  		FROM(
		SELECT p.player_code, p.player_name, p.player_img,
		       to_char(ROUND(AVG(pc.player_ast),2),'FM00.00')player_ast, p.player_backno
		FROM player p
		LEFT JOIN playerrecord pc
		ON(p.player_code = pc.player_code)
		GROUP BY p.player_code, p.player_name, p.player_img, p.player_backno
		ORDER BY player_ast desc
		)t1
		WHERE ROWNUM &lt;= 5
  	</select>
  	
  	
  
  	<!-- 공지사항 게시물 하나 선택  -->
  	<select id="notice_selectOne" parameterType="int" resultType="ndto">
 		SELECT noticeno, notice_title, notice_contents, to_char(notice_date, 'YYYY/MM/DD HH24:MI') notice_date, notice_hit 
 		FROM notice
 		WHERE noticeno =#{noticeno}
 	</select>
 	
 	
 	<!-- 공지사항 전체선택  -->
 	<select id="notice_selectAll" parameterType="se" resultType="ndto">
 		SELECT noticeno, notice_title, notice_contents, notice_date, notice_hit
 		FROM ( SELECT ROWNUM rn, noticeno, notice_title, notice_contents, notice_date, notice_hit  
 			FROM( SELECT noticeno, notice_title, notice_contents, to_char(notice_date, 'YYYY/MM/DD') notice_date, notice_hit
 					FROM notice
 					ORDER BY noticeno desc )
 			WHERE ROWNUM &lt;=#{endNo} )
 		WHERE RN &gt;=#{startNo}
 	</select>
 	
 	<!-- 공지사항 총 게시물 수  -->
 	<select id="notice_getTotal" resultType="int">
 		SELECT COUNT(*) total
 		FROM notice
 	</select>
 	
 	<!-- 공지사항 게시물 작성  -->
 	<insert id="notcie_addOne" parameterType="ndto">
	 	INSERT INTO notice
	 	VALUES (notice_noticeno_seq.nextval, 1 , #{notice_title} , #{notice_contents}, #{notice_date}, #{notice_hit} )
 	</insert>
 	
 	<!-- 공지사항 게시물 수정  -->
 	<update id="notice_updateOne" parameterType="ndto">
 		UPDATE notice
 		SET notice_title = #{notice_title}, notice_contents = #{notice_contents}
 		WHERE notceno = #{noticeno}
 	</update>
 	
 	<!-- 공지사항 게시물 삭제  -->
 	<delete id="notice_deleteOne" parameterType="int">
 		DELETE FROM notice
 		WHERE noticeno = #{noticeno}
 	</delete>
 	
 	<!-- 공지사항 게시판 조회수  -->
 	<update id="notice_raiseHits" parameterType="int">
 		UPDATE notice
 		SET notice_hit = notice_hit+1
 		WHERE noticeno = #{noticeno}
 	</update>
 	
 	<!-- 팬게시판 전체 -->
 	<select id="fan_board_selectAll" parameterType="fbStartEnd" resultType="fbdto">
 		SELECT fanno, fan_title, id, fan_date, fan_hit
 		FROM ( SELECT ROWNUM rn, fanno, fan_title, id, fan_date, fan_hit
 			FROM( SELECT fanno, fan_title, id, to_char(fan_date, 'YYYY/MM/DD') fan_date, fan_hit
 					FROM fan_board	
 					<choose>
		            <when test="search_option == 'all' "> <!-- 검색 옵션이 전체일 경우 -->
		                WHERE 
		                   id LIKE '%'||#{keyword}||'%'
		                   OR fan_contents LIKE '%' || #{keyword}||'%'
		                   OR fan_title LIKE '%'||#{keyword}||'%'   
		            </when>
		            <otherwise> <!-- 작성자/제목/내용의 검색조건으로 게시물을 검색하는 경우 -->
		                WHERE ${search_option} LIKE '%'||#{keyword}||'%'
		            </otherwise>
		        </choose>
		        <choose>
		        	<when test="sort_option == 'latest' ">
		        		ORDER BY fanno desc )
		        	</when>
		        	<when test="sort_option == 'old' " >
		        		ORDER BY fanno asc ) 
		        	</when>
		        	<otherwise>
		        		ORDER BY fanno desc ) 
		        	</otherwise>
		        </choose>		
	 			WHERE ROWNUM &lt;=#{endNo} )
	 		WHERE RN &gt;=#{startNo}
 	</select>
 	
 	
 	<!-- 팬게시판 게시물 하나 선택  -->
  	<select id="fan_board_selectOne" parameterType="int" resultType="fbdto">
 		SELECT fanno, fan_title, id, to_char(fan_date, 'YYYY/MM/DD') fan_date, fan_contents, fan_hit 
 		FROM fan_board
 		WHERE fanno =#{fanno}
 	</select>
 	
 	<!-- 팬게시판 게시물 작성  -->
 	<insert id="fan_board_addOne" parameterType="fbdto">
 		INSERT INTO fan_board
 		VALUES (fan_board_fanno_seq.nextval, #{id}, #{fan_title}, sysdate, #{fan_contents} , 0 )
 	</insert>
 	
 	<update id="fan_board_updateOne" parameterType="fbdto">
 		UPDATE fan_board
 		SET fan_title = #{fan_title}, id= #{id}, fan_contents = #{fan_contents}
 		WHERE fanno = #{fanno}
 	</update>
 	
 	<delete id="fan_board_deleteOne" parameterType="int">
 		DELETE FROM fan_board
 		WHERE fanno = #{fanno}
 	</delete>
 	
 	<select id="fan_board_getTotal" resultType="int">
  		SELECT COUNT(*) total
  		FROM fan_board
  	</select>
  	
  	<update id="fan_board_raiseHits" parameterType="int">
 		UPDATE fan_board
 		SET fan_hit  = fan_hit +1
 		WHERE fanno = #{fanno, jdbcType=INTEGER}
 	</update>
  	
	<!--  댓글 -->

	<select id="comments_selectAll" parameterType="int" resultType="cdto">
		SELECT c.commentno, c.id , to_char(c.comment_date , 'YYYY/MM/DD') comment_date , c.comment_contents , c.fanno
		FROM comments c , fan_board f
		WHERE c.fanno = f.fanno
		AND c.fanno = #{c.fanno}
	</select>
	
	<update id="comments_addOne" parameterType="cdto">
		INSERT INTO comments
 		VALUES (comments_commentno_seq.nextval, #{id, jdbcType=VARCHAR}, #{fanno}, sysdate , #{comment_contents} )
	</update>
 	
 	<delete id="comments_deleteOne" parameterType="int">
 		DELETE FROM comments
 		WHERE commentno = #{commentno}
 	</delete>
 	
 	<select id="comments_getTotal" resultType="int">
  		SELECT COUNT(*) total
  		FROM comments
  	</select>
  	
  	<!-- 어드민 메인 문의게시판  -->
  	<select id="admin_main_inquire_list" resultType="idto">
  		SELECT TO_CHAR(inq_date, 'YYYY/MM/DD') inq_date, inq_title, inq_status
		FROM inquire
		WHERE ROWNUM &lt;=5
		ORDER BY inqno desc
  	</select>
  	
  	<!-- 어드민 메인 경기일정 -->
  	<select id="admin_main_schedule_list" resultType="schedto">
		SELECT to_char(c1.game_date, 'yy-mm-dd')game_date, c1.game_arena, c2.team_logo,c2.team_name, c3.team_name,c3.team_logo team_logo2
		FROM games c1
		LEFT JOIN team c2
		ON(c1.teamno = c2.teamno)
		LEFT JOIN team c3
		ON(c3.teamno = c1.teamno2)
		WHERE (c2.teamno = 1 or c3.teamno = 1)
		AND c1.game_date BETWEEN '22-01-17' AND '22-03-01'
		AND ROWNUM &lt;=1
		ORDER BY c1.gameno asc
  	</select>
 	
 
 	<!-- 어드민 팬게시판 전체 -->
 	<select id="admin_board_selectAll" parameterType="se" resultType="fbdto">
 		SELECT fanno, fan_title, id, fan_date, fan_hit
 		FROM ( SELECT ROWNUM rn, fanno, fan_title, id, fan_date, fan_hit
 			FROM( SELECT fanno, fan_title, id, to_char(fan_date, 'YYYY/MM/DD') fan_date, fan_hit
 					FROM fan_board	
		        	ORDER BY fanno desc)	
	 			WHERE ROWNUM &lt;=#{endNo} )
	 		WHERE RN &gt;=#{startNo}
 	</select>
 	
 	<select id="admin_board_commentSelectAll" parameterType="se" resultType="cdto">
 		SELECT commentno, id, comment_date, comment_contents, fanno
 		FROM ( SELECT ROWNUM rn, commentno, id, comment_date, comment_contents, fanno
 			FROM( SELECT commentno, id, to_char(comment_date, 'YYYY/MM/DD') comment_date, comment_contents, fanno
 					FROM comments	
		        	ORDER BY commentno desc)	
	 			WHERE ROWNUM &lt;=#{endNo} )
	 		WHERE RN &gt;=#{startNo}
 	</select>
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	<!-- 전체 선수목록 -->
 	<select id="player_selectAll" resultType="pdto">
 		SELECT * FROM player
 	</select>
 	
 	<!-- 포지션별 선수목록 -->
 	<select id="player_selectPos" parameterType="String" resultType="pdto">
 		SELECT * FROM player WHERE player_pos = #{player_pos}
 	</select>
 		
 	<!-- 개인선수디테일 -->
 	<select id="player_selectOne" parameterType="int" resultType="pdto">
 		SELECT * FROM player WHERE player_backno = #{player_backno}
 	</select>
 	
 	<!-- 개인선수디테일 업데이트(수정)  -->
 	<update id="player_updateOne" parameterType="pdto">
 		UPDATE player
 		SET player_backno = #{player_backno}, player_name = #{player_name} ,  player_pos = #{player_pos}, 
 			player_birth = #{player_birth}, player_height = #{player_height}, player_weight =#{player_weight},
 			player_school = #{player_school}, player_sns = #{player_sns}
 		WHERE player_code = #{player_code}
 	</update>
 	
 	<!-- 개인선수디테일 추가  -->
 	<insert id="player_insertOne" parameterType="pdto">
 		INSERT INTO player
 		VALUES ( #{player_code}, #{teamno}, #{player_backno}, #{player_pos}, #{player_name}, #{player_height}, #{player_weight} , 
 					#{player_school}, #{player_img}, #{player_sns}, #{player_birth} )
 	</insert>
 	
 	<delete id="player_deleteOne" parameterType="int">
 		DELETE FROM player
 		WHERE player_code = #{player_code}
 	</delete>
 	
 	<!-- 개인선수통산기록 -->
 	<select id="player_selectSumRecord" parameterType="int" resultType="prdto">
 		SELECT SUM(player_pts) player_pts, SUM(player_min) player_min, SUM(player_fg) player_fg, 
 			   SUM(player_three) player_three, SUM(player_ft) player_ft, SUM(player_reb) player_reb,
 			   SUM(player_ast) player_ast, SUM(player_stl) player_stl, SUM(player_bs) player_bs, SUM(player_to) player_to
		FROM playerrecord
		WHERE player_code = (SELECT player_code FROM player
							 WHERE player_backno = #{player_backno})
 	</select>
 	
 	<!-- 개인선수평균기록 -->
 	<select id="player_selectAvgRecord" parameterType="int" resultType="prdto">
 		SELECT ROUND(AVG(player_pts),3) player_pts, ROUND(AVG(player_min),3) player_min, 
 			   ROUND(AVG(player_fg),3) player_fg, ROUND(AVG(player_three),3) player_three, 
 			   ROUND(AVG(player_ft),3) player_ft, ROUND(AVG(player_reb),3) player_reb, 
 			   ROUND(AVG(player_ast),3) player_ast, ROUND(AVG(player_stl),3) player_stl, 
 			   ROUND(AVG(player_bs),3) player_bs, ROUND(AVG(player_to),3) player_to
		FROM playerrecord 
		WHERE player_code = (SELECT player_code FROM player 
							 WHERE player_backno = #{player_backno})
 	</select>
 	
 
 	<!-- 개인선수최고기록 -->
 	<select id="player_selectTopRecord" parameterType="int" resultType="prdto">
 		SELECT MAX(player_pts) player_pts, MAX(player_min) player_min, MAX(player_fg) player_fg, 
 			   MAX(player_three) player_three, MAX(player_ft) player_ft, MAX(player_reb) player_reb,
 			   MAX(player_ast) player_ast, MAX(player_stl) player_stl, MAX(player_bs) player_bs, MAX(player_to) player_to
		FROM playerrecord
		WHERE player_code = (SELECT player_code FROM player
							 WHERE player_backno = #{player_backno})
 	</select>
 	
 	 	
 	<!-- 선수코드로 개인선수기록 정보 가져오기 -->
 	<select id="playerRecord_selectOne" parameterType="int" resultType="prdto">
 		SELECT * FROM playerrecord
 		WHERE player_code = #{player_code}
 	</select>
 	
<!--  	 <select id="admin_playerRecord_selectOne" parameterType="int" resultType="prdto">
 		SELECT pr.player_code, pr.gameno, p.player_name pr.player_pts, pr.player_min, pr.player_fg, 
 			   pr.player_three, pr.player_ft, pr.player_reb, pr.player_ast, pr.player_stl, pr.player_bs, pr.player_to
		FROM playerrecord pr , player p
		WHERE pr.player_code = (SELECT player_code FROM player WHERE player_backno = 10)
 	</select> -->
 	
 	<update id="playerRecord_updateOne" parameterType="prdto">
 		UPDATE playerrecord
 		SET player_pts = #{player_pts}, player_min = #{player_min} ,  player_fg = #{player_fg}, 
 			player_three = #{player_three}, player_ft = #{player_ft}, player_reb =#{player_reb},
 			player_ast = #{player_ast}, player_stl = #{player_stl}, player_bs = #{player_bs}, player_to = #{player_to}
 		WHERE player_code = #{player_code}
 		AND gameno = #{gameno}
 	</update>
 	
 	
 	
 	
 	<!-- 팀기록   -->
 	<select id="teamRecord_selectOne" parameterType="int" resultType="trdto">
 		SELECT * FROM teamrecord
 		WHERE teamno = #{teamno}
 	</select>
 	
 	<update id="teamRecord_updateOne" parameterType="trdto">
 		UPDATE teamrecord
 		SET teamno = #{teamno}, winteam = #{winteam},loseteam = #{loseteam},
 			team_pts = #{team_pts}, team_reb = #{team_reb}, team_ast = #{team_ast}, 
 			team_stl = #{team_stl}, team_bs = #{team_bs}, team_to = #{team_to}   
 		WHERE team_recordno = #{team_recordno}
 		AND gameno = #{gameno}
 	</update>
 	
 	
 	<!-- 팀기록실 -->
 	<select id="teamRecord_selectAll" resultType="trdto">
 		SELECT teamno, sum(winteam) winteam, sum(loseteam) loseteam, sum(team_pts) team_pts, sum(team_reb) team_reb,
			   sum(team_ast) team_ast,sum(team_stl) team_stl, sum(team_bs) team_bs, sum(team_to) team_to
		FROM teamrecord
		GROUP BY teamno
		ORDER BY winteam DESC
 	</select>
 	
 	<!-- 팀번호로 팀이름 가져오기 -->
 	<select id="teamRecord_selectTeamName" parameterType="int" resultType="String">
 		SELECT team_name FROM team
 		WHERE teamno = #{teamno}
 	</select>
 	
 	<!-- 해당 값을 기준으로 정렬해서 선수 기록 가져오기 -->
 	<select id="playerRecord_selectAll" parameterType="String" resultType="prdto">
 		SELECT player_code, SUM(player_pts) player_pts, SUM(player_min) player_min, SUM(player_fg) player_fg, 
 			   SUM(player_three) player_three, SUM(player_ft) player_ft, SUM(player_reb) player_reb,
 			   SUM(player_ast) player_ast, SUM(player_stl) player_stl, SUM(player_bs) player_bs, SUM(player_to) player_to
 		FROM playerrecord 
 		GROUP BY player_code
 		ORDER BY ${base} DESC
 	</select>
 	
 	<!-- 선수코드로 선수이름 가져오기 -->
 	<select id="teamRecord_selectPlayerName" parameterType="int" resultType="String">
 		SELECT player_name FROM player
 		WHERE player_code = #{player_code}
 	</select>
 	

 	
 	<!-- 이름과 이메일을 대조해서 회원조회 -->
 	<select id="findId" parameterType="mdto" resultType="String">
 		SELECT id
 		FROM member
 		WHERE mem_name = #{mem_name} AND mail = #{mail}
 	</select>
 	
 	<!-- 아이디와 이메일을 대조해서 회원조회 -->
 	<select id="findPw" parameterType="mdto" resultType="String">
 		SELECT pwd
 		FROM member
 		WHERE id = #{id} AND mail = #{mail}
 	</select>
 	
 	<!-- 임시 비밀번호로 재설정 -->
 	<update id="changePw" parameterType="mdto">
 		UPDATE member
 		SET pwd = #{pwd}
 		WHERE mail = #{mail}
 	</update>
 	
 	<!-- 아이디 중복확인 -->
 	<select id="idDoubleCheck" parameterType="String" resultType="String">
 		SELECT id
 		FROM member
 		WHERE id = #{id}
 	</select>
 	
 	
 	<!-- 메일 중복확인 -->
 	<select id="mailDoubleCheck" parameterType="String" resultType="String">
 		SELECT mail
 		FROM member
 		WHERE mail = #{mail}
 	</select>
 	
 	<!-- 회원가입 -->
 	<insert id="insertMember" parameterType="mdto">
 		INSERT INTO member(id, pwd, mem_name, mem_birth, gender, mp, mail, mailOk, mem_grade, enabled, mem_point, addrs, detail_addrs, amount)
 		VALUES(#{id}, #{pwd}, #{mem_name}, #{mem_birth}, #{gender}, #{mp}, #{mail}, #{mailOk}, '일반', 1, 100, #{addrs}, #{detail_addrs}, 0)
 	</insert>
 	
 	<insert id="insertMemberAuthority" parameterType="String">
 		INSERT INTO authorities(id, authority)
 		VALUES(#{id}, 'ROLE_USER')
 	</insert>
 	
 	<!-- main용 경기일정 list -->
  	<select id="main_schedule_list" resultType="schedto">
  		SELECT to_char(c1.game_date, 'yy-mm-dd')game_date, c1.game_arena, c1.game_score,
        c2.team_logo,c2.team_name, c3.team_name,c3.team_logo team_logo2
		FROM games c1
		LEFT JOIN team c2
		ON(c1.teamno = c2.teamno)
		LEFT JOIN team c3
		ON(c3.teamno = c1.teamno2)
		WHERE (c2.teamno = 1 or c3.teamno = 1)
		AND c1.game_date BETWEEN '22/01/05' AND '22/01/25'
		ORDER BY c1.gameno asc
  	</select>
  	
  	<!-- main용 공지사항 list -->
  	<select id="main_notice_list" resultType="ndto">
  		SELECT noticeno, notice_title, to_char(notice_date,'yyyy-mm-dd')notice_date
		FROM notice
		WHERE ROWNUM &lt;=4
		ORDER BY noticeno desc
  	</select>
  	
  	<!-- main용 갤러리 list -->
  	<select id="main_gallery_list" resultType="gdto">
  		SELECT ROWNUM, t1.*
		FROM (SELECT gc.gallery_category, g.galleryno, g.gallery_title, to_char(g.gallery_date, 'yyyy-mm-dd')gallery_date, f.file_url
		        FROM gallery_category gc
		        LEFT JOIN gallery g
		        ON(gc.gallery_category_no = g.gallery_category_no)
		        LEFT JOIN files f
		        ON(g.galleryno = f.galleryno)
		        WHERE g.gallery_category_no = 1
		        ORDER BY galleryno desc)t1
		WHERE ROWNUM &lt; =3
  	</select>
   	
 	<!-- 게시글 추천시 recom테이블에 insert -->
 	<insert id="insert_like" parameterType="recomdto">
 		INSERT INTO recommend(recomno, id, galleryno, likecheck)
 		VALUES( RECOMMEND_RNO_SEQ.nextval, #{id}, #{galleryno}, 1)
 	</insert>
 	<insert id="insert_like_fan" parameterType="recomdto">
 		INSERT INTO recommend(recomno, id, fanno, likecheck)
 		VALUES( RECOMMEND_RNO_SEQ.nextval, #{id}, #{fanno}, 1)
 	</insert>

    <!--갤러리 추천 등록 여부 체크 -->
  	<select id="selectRecomOne" parameterType="recomdto" resultType="recomdto" >
  		SELECT id, likecheck, recomno, galleryno
  			FROM recommend
  			WHERE ID = #{id}
  			AND galleryno = #{galleryno}  			
  	</select>
  	  <!--팬게시판 추천 등록 여부 체크 -->
  	<select id="selectFanRecomOne" parameterType="recomdto" resultType="recomdto" >
  		SELECT id, likecheck, recomno, fanno
  			FROM recommend
  			WHERE ID = #{id}
  			AND fanno = #{fanno}  			
  	</select>
  	
  	<!--갤러리 좋아요 갯수 -->
  	<select id="count_like" parameterType="gdto" resultType="int">
  		SELECT count(*) FROM recommend 
		WHERE galleryno = #{galleryno}
		AND likecheck = 1
  	</select>
  	
  	<!--팬게시판 좋아요 갯수 -->
  	<select id="countFan_like" parameterType="fbdto" resultType="int">
  		SELECT count(*) FROM recommend 
		WHERE fanno = #{fanno}
		AND likecheck = 1
  	</select>
  	
  	<!-- 추천취소시 1행 삭제 -->
  	<delete id="delete_like" parameterType="int">
  		DELETE recommend
  		WHERE recomno = #{recomno}
  	</delete>
  	
  	
	<!-- 마이페이지 문의사항 조회 -->
 	<select id="admin_inquire_selectAll" parameterType="se" resultType="idto">
	SELECT inqno,id,inq_title,inq_date,inq_contents,inq_status,inq_ans
	FROM(SELECT ROWNUM rn, inqno,id,inq_title,inq_date,inq_contents,inq_status,inq_ans
    	FROM(SELECT inqno,id,inq_title, TO_CHAR(inq_date, 'YYYY/MM/DD') inq_date,inq_contents,inq_status,inq_ans
       		 FROM inquire
        	 ORDER BY inqno desc)
    	WHERE ROWNUM &lt; #{endNo})
	WHERE rn &gt; #{startNo}
	</select>

	
  

  	<insert id="mypage_insertOne" parameterType="idto">
  		INSERT INTO inquire 
  		VALUES(INQUIRE_INO_SEQ.nextval, #{id}, #{inq_title}, sysdate, #{inq_contents},0,null)
	</insert>
	
  	<insert id="admin_inquire_insertOne" parameterType="idto">
  		INSERT INTO inquire
  		VALUES(inquire_inqno_seq.nextval, #{id}, #{inq_title}, inq_date, #{inq_contents}, 0, null)
  	</insert>
  	
 	<!-- 마이페이지 문의사항 자세히보기-->
  	<select id="mypage_selectOne" parameterType="int" resultType="idto">
  		SELECT inqno,id,inq_title,inq_date,inq_contents,inq_status,inq_ans
	</select>
	
  	<select id="admin_inquire_selectOne" parameterType="int" resultType="idto">
  		SELECT *
  		FROM inquire
  		WHERE inqno = #{inqno}
  	</select>
  	
 	<!-- 마이페이지 문의사항 가져오기-->
  	<select id="mypage_getTotal" resultType="int"></select>

  	<select id="admin_inquire_getTotal" resultType="int">
  		SELECT COUNT(*)
  		FROM inquire
  	</select>
  	
  	<update id="modifyMember" parameterType="mdto">
  		UPDATE member
  		SET pwd = #{pwd}, mail = #{mail}
  		WHERE id = #{id}
  	</update>
  	
  	<select id="imformation_id" parameterType="String" resultType="mdto">
  		SELECT id,pwd,mem_name,mem_birth,gender,mp,mail,mem_point,addrs
  		FROM member 
  		WHERE id = #{id}
  	</select>
 	
  	<update id="admin_inquire_modify" parameterType="idto">
  		UPDATE inquire
  		SET inq_status= #{inq_status, jdbcType=INTEGER} , inq_ans = #{inq_ans,jdbcType=VARCHAR}
 		WHERE inqno = #{inqno, jdbcType=INTEGER}
  	</update>
  	
  	<delete id="admin_inquire_delete" parameterType="int">
  		DELETE inquire
  		WHERE inqno = #{inqno}
  	</delete>
  	
 	<!-- ticketing 홈경기 -->
 	<select id="selectHomeGames" resultType="schedto">
 		SELECT g.game_date game_date, t.team_logo team_logo, t.team_name team_name, t2.team_name team_name2, t2.team_logo team_logo2, g.game_arena game_arena, g.game_date2 game_date2
		FROM (select ROWNUM rNUM, to_char(game_date, 'MM.DD(dy) HH:MI') game_date, teamno, teamno2, game_arena, to_char(game_date-2, 'MM.DD HH:MI') game_date2
		FROM games
		WHERE teamno = 1
		AND game_date <![CDATA[>]]> SYSDATE
		ORDER BY game_date) g, team t, team t2
		WHERE t.teamno = g.teamno
		AND t2.teamno = g.teamno2
		AND ROWNUM <![CDATA[<=]]> 5
		ORDER BY g.rnum
 	</select>
 	
 	<select id="selectAwayGames" resultType="schedto">
 		SELECT g.game_date game_date, t.team_logo team_logo, t.team_name team_name, t2.team_name team_name2, t2.team_logo team_logo2, g.game_arena game_arena, g.game_date2 game_date2
		FROM (select ROWNUM rNUM, to_char(game_date, 'MM.DD(dy) HH:MI') game_date, teamno, teamno2, game_arena, to_char(game_date-2, 'MM.DD HH:MI') game_date2
		FROM games
		WHERE teamno2 = 1
		AND game_score IS NULL
		ORDER BY game_date) g, team t, team t2
		WHERE t.teamno = g.teamno
		AND t2.teamno = g.teamno2
		AND ROWNUM <![CDATA[<=]]> 5
		ORDER BY g.rnum
 	</select>
	
	
	<!-- game_date로 게임번호 가져오기 -->
	<select id="selectOneGameno" parameterType="String" resultType="int">
		SELECT gameno
		FROM games
		WHERE teamno = 1 AND to_char(game_date, 'MM.DD(dy) HH:MI') = #{game_date}
	</select>
	
	
	<!-- 좌석 구역 가져오기 -->
	<select id="selectArea" parameterType="String" resultType="seataDTO">
		SELECT seatano, seatgno, seat_area
		FROM seatarea
		WHERE seatgno = (SELECT seatgno
        				FROM seatgrade
                		WHERE seat_grade = #{seat_grade})
	</select>
	
	<!-- seat_area 로 seatDTO list가져오기 -->
	<select id="selectSeat" parameterType="String" resultType="seatDTO">
		SELECT seatno, seatano, detail_seat, seat_status
		FROM seat
		WHERE seatano = (SELECT seatano
                		FROM seatarea
                		WHERE seat_area = #{seat_area})
	</select>
	
	<!-- seat_area 로 seatano 가져오기 -->
	<select id="selectSeatano" parameterType="String" resultType="int">
		SELECT seatano
		FROM seatarea
		WHERE seat_area = #{seat_area}
	</select>
	
	<!-- seatano, detail_seat 으로 seatno 가져오기 -->
	<select id="selectSeatno" parameterType="seatDTO" resultType="int">
		SELECT seatno
		FROM seat
		WHERE seatano = #{seatano} AND detail_seat = #{detail_seat}
	</select>
	
	<!-- 좌석 seat_status update -->
	<update id="updateSeat_status" parameterType="int">
		UPDATE seat
		SET seat_status = 1
		WHERE seatno = #{seatno}
	</update>
	
	<!-- 좌석 가격 가져오기 -->
	<select id="getPrice" parameterType="String" resultType="int">
		SELECT seat_price
		FROM seatgrade
		WHERE seat_grade = #{seat_grade}
	</select>
	
	<!-- 사용자 포인트 가져오기 -->
	<select id="getPoint" parameterType="String" resultType="int">
		SELECT mem_point
		FROM member
		WHERE id = #{id}
	</select>
	
	<!-- 사용자의 모든 정보 가져오기 -->
	<select id="selectMember" parameterType="String" resultType="mdto">
		SELECT *
		FROM member
		WHERE id = #{id}
	</select>
	
	
	<!-- 사용자가 포인트 금액 조정 -->
	<update id="member_updatePoint" parameterType="mdto">
		UPDATE member
		SET mem_point = #{mem_point}
		WHERE id = #{id}
	</update>
	
	<!-- 사용자의 amount 금액 증식 -->
	<update id="member_updateAmount" parameterType="mdto">
		UPDATE member
		SET amount = #{amount}
		WHERE id = #{id}
	</update>
	
	<!-- 사용자의 grade 변경 -->
	<update id="member_updateGrade" parameterType="mdto">
		UPDATE member
		SET mem_grade = #{mem_grade}
		WHERE id = #{id}
	</update>
	
	
	<!-- 예매 테이블 정보 입력 -->
	<insert id="insertReservation" parameterType="reservationDTO">
		INSERT INTO reservation
		VALUES(RESERVATION_RESVNO_SEQ.nextval, #{seatno}, #{id}, #{gameno}, #{resv_number})
	</insert>
	
</mapper>

